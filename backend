from fastapi import FastAPI, UploadFile, File, HTTPException
from fastapi.middleware.cors import CORSMiddleware
from fastapi.responses import JSONResponse
from pydantic import BaseModel
from typing import Dict, Any, List
import json
import os
from datetime import datetime

app = FastAPI(title="Resume Editor API", version="1.0.0")

# Enable CORS
app.add_middleware(
    CORSMiddleware,
    allow_origins=["*"],
    allow_credentials=True,
    allow_methods=["*"],
    allow_headers=["*"],
)

# In-memory storage for resumes with auto-incrementing IDs
resumes_db = {}
current_id = 1

# Sample AI enhancements for different sections
AI_ENHANCEMENTS = {
    "summary": "Highly skilled professional with demonstrated experience in...",
    "experience": "Key Achievements:\n- Increased productivity by 30%\n- Led team of 5 developers...",
    "education": "Relevant Coursework:\n- Advanced Algorithms\n- Database Systems...",
    "skills": "Technical Proficiencies:\n- JavaScript (Expert)\n- Python (Advanced)..."
}

class SectionEnhancementRequest(BaseModel):
    section: str
    content: str

class ResumeModel(BaseModel):
    name: str
    summary: str = ""
    experience: List[str] = []
    education: List[str] = []
    skills: List[str] = []

@app.post("/ai-enhance", response_model=Dict[str, str])
async def enhance_section(request: SectionEnhancementRequest):
    """Mock AI enhancement endpoint for resume sections"""
    try:
        enhanced_content = f"{request.content}\n\n{AI_ENHANCEMENTS.get(request.section, 'Enhanced with AI suggestions')}"
        return {"enhanced_content": enhanced_content}
    except Exception as e:
        raise HTTPException(status_code=500, detail=str(e))

@app.post("/save-resume", response_model=Dict[str, str])
async def save_resume(resume_data: Dict[str, Any]):
    """Save resume data to memory with auto-generated ID"""
    global current_id
    try:
        resume_id = str(current_id)
        resumes_db[resume_id] = {
            "id": resume_id,
            "created_at": datetime.now().isoformat(),
            "data": resume_data
        }
        current_id += 1
        return {"message": "Resume saved successfully", "resume_id": resume_id}
    except Exception as e:
        raise HTTPException(status_code=400, detail=str(e))

@app.get("/get-resume/{resume_id}", response_model=Dict[str, Any])
async def get_resume(resume_id: str):
    """Retrieve saved resume by ID"""
    if resume_id not in resumes_db:
        raise HTTPException(status_code=404, detail="Resume not found")
    return resumes_db[resume_id]

@app.get("/list-resumes", response_model=Dict[str, Dict[str, Any]])
async def list_resumes():
    """List all saved resumes"""
    return resumes_db

@app.post("/upload-resume", response_model=Dict[str, Any])
async def upload_resume(file: UploadFile = File(...)):
    """Mock resume upload and parsing endpoint"""
    try:
       
        if file.filename.split('.')[-1].lower() not in ['pdf', 'docx']:
            raise HTTPException(status_code=400, detail="Invalid file format. Only PDF and DOCX are supported")
        
        return {
            "status": "success",
            "filename": file.filename,
            "content_type": file.content_type,
            "content": {
                "name": "John Doe",
                "summary": "Experienced software developer with 5+ years in web technologies",
                "experience": [
                    "Senior Developer at ABC Corp (2020-Present)",
                    "Junior Developer at XYZ Inc (2018-2020)"
                ],
                "education": [
                    "BSc in Computer Science, University of Tech (2018)",
                    "Certified Full Stack Developer (2020)"
                ],
                "skills": [
                    "JavaScript/TypeScript",
                    "React/Redux",
                    "Python/Django",
                    "Database Design"
                ]
            }
        }
    except Exception as e:
        raise HTTPException(status_code=500, detail=str(e))

@app.get("/download-resume/{resume_id}", response_class=JSONResponse)
async def download_resume(resume_id: str):
    """Download resume as JSON file"""
    if resume_id not in resumes_db:
        raise HTTPException(status_code=404, detail="Resume not found")
    
    resume_data = resumes_db[resume_id]
    return JSONResponse(
        content=resume_data,
        media_type="application/json",
        headers={"Content-Disposition": f"attachment; filename=resume_{resume_id}.json"}
    )

@app.delete("/delete-resume/{resume_id}")
async def delete_resume(resume_id: str):
    """Delete a saved resume"""
    if resume_id not in resumes_db:
        raise HTTPException(status_code=404, detail="Resume not found")
    del resumes_db[resume_id]
    return {"message": "Resume deleted successfully"}

if __name__ == "__main__":
    import uvicorn
    uvicorn.run(app, host="0.0.0.0", port=8000)
